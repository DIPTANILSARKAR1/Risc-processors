`timescale 1ns / 1ps

module Risc_16_bit(
 input clk // Main clock input for the processor
);

 // Wires for control signals generated by the Control Unit
 wire jump, bne, beq, mem_read, mem_write, alu_src, reg_dst, mem_to_reg, reg_write;
 // Wire for ALU operation type (input to ALU_Control)
 wire[1:0] alu_op;
 // Wire for opcode extracted from instruction (output from Datapath, input to Control Unit)
 wire [3:0] opcode;

 // Instantiate the Datapath Unit
 // This module contains the main dataflow components like PC, Register File, ALU, Memories
 Datapath_Unit DU
 (
  .clk(clk),           // Connect clock
  .jump(jump),         // Connect jump control signal
  .beq(beq),           // Connect branch-on-equal control signal
  .mem_read(mem_read), // Connect memory read control signal
  .mem_write(mem_write),// Connect memory write control signal
  .alu_src(alu_src),   // Connect ALU source select control signal
  .reg_dst(reg_dst),   // Connect register destination select control signal
  .mem_to_reg(mem_to_reg),// Connect memory-to-register write-back select signal
  .reg_write(reg_write),// Connect register write enable signal
  .bne(bne),           // Connect branch-on-not-equal control signal
  .alu_op(alu_op),     // Connect ALU operation type (input)
  .opcode(opcode)      // Connect opcode (output from datapath, input to control)
 );

 // Instantiate the Control Unit
 // This module generates all control signals based on the instruction opcode
 Control_Unit control
 (
  .opcode(opcode),      // Connect opcode (input from datapath)
  .reg_dst(reg_dst),    // Connect register destination select control signal
  .mem_to_reg(mem_to_reg),// Connect memory-to-register write-back select signal
  .alu_op(alu_op),      // Connect ALU operation type (output)
  .jump(jump),          // Connect jump control signal
  .bne(bne),            // Connect branch-on-not-equal control signal
  .beq(beq),            // Connect branch-on-equal control signal
  .mem_read(mem_read),  // Connect memory read control signal
  .mem_write(mem_write),// Connect memory write control signal
  .alu_src(alu_src),    // Connect ALU source select control signal
  .reg_write(reg_write) // Connect register write enable signal
 );

endmodule
